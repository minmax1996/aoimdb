// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package command

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DatabaseControllerClient is the client API for DatabaseController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatabaseControllerClient interface {
	SelectDatabase(ctx context.Context, in *SelectDatabaseRequest, opts ...grpc.CallOption) (*SelectDatabaseResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error)
	GetKeys(ctx context.Context, in *GetKeysRequest, opts ...grpc.CallOption) (*GetKeysResponse, error)
}

type databaseControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewDatabaseControllerClient(cc grpc.ClientConnInterface) DatabaseControllerClient {
	return &databaseControllerClient{cc}
}

func (c *databaseControllerClient) SelectDatabase(ctx context.Context, in *SelectDatabaseRequest, opts ...grpc.CallOption) (*SelectDatabaseResponse, error) {
	out := new(SelectDatabaseResponse)
	err := c.cc.Invoke(ctx, "/DatabaseController/SelectDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseControllerClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/DatabaseController/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseControllerClient) Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error) {
	out := new(SetResponse)
	err := c.cc.Invoke(ctx, "/DatabaseController/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseControllerClient) GetKeys(ctx context.Context, in *GetKeysRequest, opts ...grpc.CallOption) (*GetKeysResponse, error) {
	out := new(GetKeysResponse)
	err := c.cc.Invoke(ctx, "/DatabaseController/GetKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatabaseControllerServer is the server API for DatabaseController service.
// All implementations must embed UnimplementedDatabaseControllerServer
// for forward compatibility
type DatabaseControllerServer interface {
	SelectDatabase(context.Context, *SelectDatabaseRequest) (*SelectDatabaseResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Set(context.Context, *SetRequest) (*SetResponse, error)
	GetKeys(context.Context, *GetKeysRequest) (*GetKeysResponse, error)
	mustEmbedUnimplementedDatabaseControllerServer()
}

// UnimplementedDatabaseControllerServer must be embedded to have forward compatible implementations.
type UnimplementedDatabaseControllerServer struct {
}

func (UnimplementedDatabaseControllerServer) SelectDatabase(context.Context, *SelectDatabaseRequest) (*SelectDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectDatabase not implemented")
}
func (UnimplementedDatabaseControllerServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDatabaseControllerServer) Set(context.Context, *SetRequest) (*SetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedDatabaseControllerServer) GetKeys(context.Context, *GetKeysRequest) (*GetKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeys not implemented")
}
func (UnimplementedDatabaseControllerServer) mustEmbedUnimplementedDatabaseControllerServer() {}

// UnsafeDatabaseControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatabaseControllerServer will
// result in compilation errors.
type UnsafeDatabaseControllerServer interface {
	mustEmbedUnimplementedDatabaseControllerServer()
}

func RegisterDatabaseControllerServer(s grpc.ServiceRegistrar, srv DatabaseControllerServer) {
	s.RegisterService(&DatabaseController_ServiceDesc, srv)
}

func _DatabaseController_SelectDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseControllerServer).SelectDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DatabaseController/SelectDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseControllerServer).SelectDatabase(ctx, req.(*SelectDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseController_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseControllerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DatabaseController/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseControllerServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseController_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseControllerServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DatabaseController/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseControllerServer).Set(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseController_GetKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseControllerServer).GetKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DatabaseController/GetKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseControllerServer).GetKeys(ctx, req.(*GetKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DatabaseController_ServiceDesc is the grpc.ServiceDesc for DatabaseController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DatabaseController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DatabaseController",
	HandlerType: (*DatabaseControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SelectDatabase",
			Handler:    _DatabaseController_SelectDatabase_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _DatabaseController_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _DatabaseController_Set_Handler,
		},
		{
			MethodName: "GetKeys",
			Handler:    _DatabaseController_GetKeys_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/command/command.proto",
}
